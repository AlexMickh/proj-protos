// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/recomendation/recomendation.proto

package recomendation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Recomendation_BySkills_FullMethodName = "/recomendation.Recomendation/BySkills"
)

// RecomendationClient is the client API for Recomendation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecomendationClient interface {
	BySkills(ctx context.Context, in *BySkillsRequest, opts ...grpc.CallOption) (*BySkillsResponse, error)
}

type recomendationClient struct {
	cc grpc.ClientConnInterface
}

func NewRecomendationClient(cc grpc.ClientConnInterface) RecomendationClient {
	return &recomendationClient{cc}
}

func (c *recomendationClient) BySkills(ctx context.Context, in *BySkillsRequest, opts ...grpc.CallOption) (*BySkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BySkillsResponse)
	err := c.cc.Invoke(ctx, Recomendation_BySkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecomendationServer is the server API for Recomendation service.
// All implementations must embed UnimplementedRecomendationServer
// for forward compatibility.
type RecomendationServer interface {
	BySkills(context.Context, *BySkillsRequest) (*BySkillsResponse, error)
	mustEmbedUnimplementedRecomendationServer()
}

// UnimplementedRecomendationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecomendationServer struct{}

func (UnimplementedRecomendationServer) BySkills(context.Context, *BySkillsRequest) (*BySkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BySkills not implemented")
}
func (UnimplementedRecomendationServer) mustEmbedUnimplementedRecomendationServer() {}
func (UnimplementedRecomendationServer) testEmbeddedByValue()                       {}

// UnsafeRecomendationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecomendationServer will
// result in compilation errors.
type UnsafeRecomendationServer interface {
	mustEmbedUnimplementedRecomendationServer()
}

func RegisterRecomendationServer(s grpc.ServiceRegistrar, srv RecomendationServer) {
	// If the following call pancis, it indicates UnimplementedRecomendationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Recomendation_ServiceDesc, srv)
}

func _Recomendation_BySkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BySkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecomendationServer).BySkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recomendation_BySkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecomendationServer).BySkills(ctx, req.(*BySkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recomendation_ServiceDesc is the grpc.ServiceDesc for Recomendation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recomendation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recomendation.Recomendation",
	HandlerType: (*RecomendationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BySkills",
			Handler:    _Recomendation_BySkills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/recomendation/recomendation.proto",
}
